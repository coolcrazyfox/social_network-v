{"version":3,"sources":["components/common/FormsControls/FormsControls.module.scss","components/common/FormsControls/FormsControls.tsx","utils/validators/validator.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.scss","components/Profile/MyPosts/Post/Post.module.scss","assets/images/7zHH.gif","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","FormControl","input","meta","props","hasError","error","touched","className","s","formControlError","children","Textarea","restProps","Input","createField","placeholder","name","validators","component","text","wrapperClass","fieldClass","validate","required","value","maxLengthCreator","maxLength","length","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","onSubmit","editFormContainer","Button","type","button","inputErrorStyle","formSummaryError","userInfoText","editModeInput","flexContainer","editModeContacts","keys","contacts","map","key","ProfileStatus","state","editMode","status","isOwner","activateEditMode","setState","deactivateEditMode","updateStatus","onStatusChange","e","currentTarget","prevProps","prevState","this","autoFocus","onChange","onBlur","editStatus","onClick","React","Component","Contact","contactTitle","contactValue","contactText","ProfileData","enableEditMode","userDescription","userName","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","every","el","contactsSection","ProfileInfo","savePhoto","saveProfile","useState","setEditMode","Preloader","backgroundImage","src","profileBackground","alt","userInfoSection","userAvatarSection","userAvatar","photos","large","AnonymousUserPhoto","inputFileButtonContainer","id","inputFile","target","files","htmlFor","editModeContainer","statusContainer","then","initialValues","Post","message","likesCount","post","avatar","textBlock","userMessage","likesWrapper","maxLength100","NewPostReduxForm","style","newPostCreateField","sendPostBtn","MyPosts","memo","postsElements","posts","index","myPostsSection","myPostsTitle","newPostSection","formData","addPost","newPostBody","MyPostsContainer","connect","profilePage","dispatch","newPostText","Profile","small","ProfileContainer","userId","Number","match","params","authorizedUserId","history","getUserProfile","getStatus","refreshProfile","currentUser","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.8a2360d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControlError\":\"FormsControls_formControlError__VBZAh\",\"formSummaryError\":\"FormsControls_formSummaryError__1zq_V\"};","import React from \"react\";\nimport s from \"./FormsControls.module.scss\"\nimport { Field } from \"redux-form\";\n\nexport const FormControl: React.FC<any> = ({input, meta, ...props}) => {\n    const hasError = meta.error && meta.touched;\n    return (\n        <div className={hasError ? s.formControlError : \"\"}>\n            <div>\n                {props.children}\n            </div>\n            <div>\n                {hasError && <span>{meta.error}</span>}\n            </div>\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, children, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\n}\n\nexport const Input = (props: any) => {\n    const {input, meta, children, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n}\n\nexport const createField = (placeholder: string = \"\", name: string, validators: Array<any>, component: any,\n    props = {}, text: string = \"\", wrapperClass: any, fieldClass: any) => (\n    <div className={wrapperClass}>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validators}\n               component={component}\n               {...props}\n               className={fieldClass}\n        />\n        {text}\n    </div>\n)","export const required = (value: string) => {\n    if (value) {\n        return undefined;\n    }\n    return \"Field is required\";\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value && value.length > maxLength) {\n        return `Max length is ${maxLength} symbols`;\n    }\n    return undefined;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgroundImage\":\"ProfileInfo_backgroundImage__iHHtU\",\"button\":\"ProfileInfo_button__1_20o\",\"userInfoSection\":\"ProfileInfo_userInfoSection__1yOV0\",\"editModeContainer\":\"ProfileInfo_editModeContainer__1d4gh\",\"editFormContainer\":\"ProfileInfo_editFormContainer__2H2VP\",\"editModeContacts\":\"ProfileInfo_editModeContacts__3RUP4\",\"editModeInput\":\"ProfileInfo_editModeInput__3AD2C\",\"userDescription\":\"ProfileInfo_userDescription__ZKYvt\",\"userName\":\"ProfileInfo_userName__29-Sk\",\"userInfoText\":\"ProfileInfo_userInfoText__1J8O8\",\"flexContainer\":\"ProfileInfo_flexContainer__jxKq8\",\"contactsSection\":\"ProfileInfo_contactsSection__at-Bh\",\"contactText\":\"ProfileInfo_contactText__AlN6a\",\"userAvatarSection\":\"ProfileInfo_userAvatarSection__32LX5\",\"userAvatar\":\"ProfileInfo_userAvatar__2va4n\",\"inputFileButtonContainer\":\"ProfileInfo_inputFileButtonContainer__2EVC7\",\"inputFile\":\"ProfileInfo_inputFile___elsh\",\"statusContainer\":\"ProfileInfo_statusContainer__1__vp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsSection\":\"MyPosts_myPostsSection__1cMKZ\",\"myPostsTitle\":\"MyPosts_myPostsTitle__3x53q\",\"newPostSection\":\"MyPosts_newPostSection__3HZAh\",\"newPostCreateField\":\"MyPosts_newPostCreateField__3vwDe\",\"sendPostBtn\":\"MyPosts_sendPostBtn__63DKz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__3Up4H\",\"editStatus\":\"ProfileStatus_editStatus__14DDY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__BjSSn\",\"avatar\":\"Post_avatar__3K7IG\",\"textBlock\":\"Post_textBlock__22kfL\",\"userMessage\":\"Post_userMessage__2-Df0\",\"likesWrapper\":\"Post_likesWrapper__1Idzj\",\"likesCount\":\"Post_likesCount__1Za8B\"};","export default __webpack_public_path__ + \"static/media/7zHH.d033fd4a.gif\";","import React, { ComponentType } from \"react\";\nimport s from \"./ProfileInfo.module.scss\";\nimport { createField, Input, Textarea } from \"../../common/FormsControls/FormsControls\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { ProfileType } from \"../../../redux/reducers/profileReducer\";\nimport inputErrorStyle from \"../../common/FormsControls/FormsControls.module.scss\";\nimport Button from \"../../common/Button/Button\";\n\nexport type ProfileDataFormPropsType = {\n    profile: ProfileType\n}\n\nconst ProfileDataForm: ComponentType<ProfileDataFormPropsType & InjectedFormProps<ProfileType, ProfileDataFormPropsType, string>> =\n    ({handleSubmit, profile, error}) => {\n        return <form onSubmit={handleSubmit} className={s.editFormContainer}>\n            <div>\n                <div>\n                    <Button type={\"submit\"} className={s.button}>\n                        Save info\n                    </Button>\n                </div>\n                {error && <div className={inputErrorStyle.formSummaryError}>\n                    {error}\n                </div>\n                }\n                <div className={s.userInfoText}>\n                    <span className={s.userInfoText}>Full name: </span>\n                    {createField(\"Full name\", \"fullName\", [], Input, {}, \"\", \"\", s.editModeInput)}\n                </div>\n                <div className={s.flexContainer}>\n                    <span className={s.userInfoText}>Looking for a job: </span>\n                    <div className={s.editModeInput}>\n                        {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"}, \"\", \"\", \"\")}\n                    </div>\n                </div>\n                <div>\n                    <span className={s.userInfoText}>Skills: </span>\n                    {createField(\"Skills\", \"lookingForAJobDescription\", [], Textarea, {}, \"\", \"\", s.editModeInput)}\n                </div>\n                <div>\n                    <span className={s.userInfoText}>About me: </span>\n                    {createField(\"About me\", \"aboutMe\", [], Textarea, {}, \"\", \"\", s.editModeInput)}\n                </div>\n            </div>\n            <div>\n                <span className={s.editModeContacts}>Contacts</span>\n                {Object.keys(profile.contacts).map(key => {\n                    return <div key={key}>\n                        {<span className={s.userInfoText}>{key}</span>}: {createField(key, `contacts.${key}`, [], Input, {}, \"\", \"\", s.editModeInput)}\n                    </div>\n                })}\n            </div>\n        </form>\n    }\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>\n({form: \"edit-profile\"})(ProfileDataForm);\n\nexport default ProfileDataFormReduxForm;","import React, { ChangeEvent } from \"react\";\nimport s from \"./ProfileStatus.module.scss\"\n\ntype MapDispatchToPropsType = {\n    updateStatus: (status: string) => void\n}\n\ntype MapStateToPropsType = {\n    status: string\n    isOwner: boolean\n}\n\nexport type ProfileStatusPropsType = MapStateToPropsType & MapDispatchToPropsType;\n\ntype StateType = { editMode: boolean, status: string, isOwner: boolean };\n\nclass ProfileStatus extends React.Component<ProfileStatusPropsType, StateType> {\n    state = {\n        editMode: false,\n        status: this.props.status,\n        isOwner: this.props.isOwner,\n    }\n\n    activateEditMode = () => {\n        if (this.state.isOwner) {\n            this.setState({\n                editMode: true,\n            })\n        }\n    }\n\n    deactivateEditMode = () => {\n        this.setState({\n            editMode: false,\n        });\n        this.props.updateStatus(this.state.status);\n    }\n\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status: e.currentTarget.value,\n        })\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>) {\n        if (prevProps.status !== this.props.status) {\n            this.setState({\n                status: this.props.status,\n            })\n        }\n    }\n\n    render() {\n        return <div>\n            {!this.state.editMode ?\n                <div>\n                    <span className={s.status}\n                          onClick={this.activateEditMode}>{this.props.status || \"Status is not set\"}\n                    </span>\n                </div>\n                :\n                <div>\n                    <input autoFocus\n                           onChange={this.onStatusChange}\n                           onBlur={this.deactivateEditMode}\n                           value={this.state.status}\n                           className={s.editStatus}\n                    >\n                    </input>\n                </div>\n            }\n        </div>\n    }\n}\n\nexport default ProfileStatus;","import React from \"react\";\nimport s from \"../ProfileInfo.module.scss\";\nimport { ProfileContacts, ProfileType } from \"../../../../redux/reducers/profileReducer\";\nimport Button from \"../../../common/Button/Button\";\n\ntype ContactType = {\n    contactTitle: string\n    contactValue: string | null\n}\n\nconst Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contactText}>\n        {contactTitle}: {contactValue}\n    </div>\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    enableEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, enableEditMode}) => {\n    return <div className={s.userDescription}>\n        {isOwner && <div>\n            <Button onClick={enableEditMode} className={s.button}>\n                Edit info\n            </Button>\n        </div>}\n        <div className={s.userName}>{profile.fullName ? profile.fullName : \"information is absent\"}</div>\n        <div className={s.userInfoText}>Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\n        {profile.lookingForAJobDescription &&\n        <div className={s.userInfoText}>Skills: {profile.lookingForAJobDescription}</div>}\n        {profile.aboutMe && <div className={s.userInfoText}>About me: {profile.aboutMe}</div>}\n        {/* if there is at least 1 filled contact then perform the render */\n            !Object.keys(profile.contacts).map(key => {return profile.contacts[key as keyof ProfileContacts]})\n                .every(el => el === null) &&\n            <div>\n                <span className={s.contactsSection}>Contacts: </span>\n                {Object.keys(profile.contacts).map(key => {\n                    return profile.contacts[key as keyof ProfileContacts]\n                        ? <Contact key={key}\n                                   contactTitle={key}\n                                   contactValue={profile.contacts[key as keyof ProfileContacts]}/>\n                        : null\n                })}\n            </div>\n        }\n    </div>\n}\n\nexport default ProfileData;","import React, { ChangeEvent, useState } from \"react\";\nimport s from \"./ProfileInfo.module.scss\";\nimport { Preloader } from \"../../common/Preloader/Preloader\";\nimport AnonymousUserPhoto from \"../../../assets/images/user.png\";\nimport profileBackground from \"../../../assets/images/7zHH.gif\"\nimport { ProfileType } from \"../../../redux/reducers/profileReducer\";\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\nimport ProfileData from \"./ProfileData/ProfileData\";\n\ntype ProfileInfoPropsType = {\n    profile: null | ProfileType\n    isOwner: boolean\n    status: string\n    updateStatus: (status: string) => void\n    savePhoto: (photoFile: File) => void\n    saveProfile: (profile: ProfileType) => any\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\n    profile,\n    isOwner,\n    status,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n}) => {\n    let [editMode, setEditMode] = useState<boolean>(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length === 1) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (profile: ProfileType) => {\n        saveProfile(profile)\n            .then(() => {\n                setEditMode(false);\n            })\n    }\n\n    return (\n        <div>\n            <div>\n                <img\n                    className={s.backgroundImage}\n                    src={profileBackground}\n                    alt=\"Background\"\n                />\n            </div>\n            <div className={s.userInfoSection}>\n                <div className={s.userAvatarSection}>\n                    <img\n                        className={s.userAvatar}\n                        src={profile.photos.large || AnonymousUserPhoto}\n                        alt={profile.fullName + \" user avatar\"}\n                    />\n                    {\n                        isOwner &&\n                        <div className={s.inputFileButtonContainer}>\n                            <input type=\"file\"\n                                   name=\"file\"\n                                   id=\"file\"\n                                   className={s.inputFile}\n                                   onChange={onMainPhotoSelected}/>\n                            <label htmlFor=\"file\">Change avatar</label>\n                        </div>\n                    }\n                </div>\n                <div className={s.editModeContainer}>\n                    <div className={s.statusContainer}>\n                        <ProfileStatus status={status}\n                                       updateStatus={updateStatus}\n                                       isOwner={isOwner}\n                        />\n                    </div>\n                    {editMode\n                        ? <ProfileDataFormReduxForm onSubmit={onSubmit}\n                                                    profile={profile}\n                                                    initialValues={profile}\n                        />\n                        : <ProfileData profile={profile}\n                                       isOwner={isOwner}\n                                       enableEditMode={() => setEditMode(true)}\n                        />\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};","import React from \"react\";\nimport s from \"./Post.module.scss\";\nimport AnonymousUserPhoto from \"../../../../assets/images/user.png\";\n\nexport type PostType = {\n    message: string\n    likesCount: number\n    userAvatar: string | null | undefined,\n}\n\nexport const Post: React.FC<PostType> = ({message, likesCount, userAvatar}) => {\n    return (\n        <div className={s.post}>\n            <div className={s.avatar}>\n                <img\n                    src={userAvatar || AnonymousUserPhoto}\n                    alt=\"user avatar\"/>\n            </div>\n            <div className={s.textBlock}>\n                <p className={s.userMessage}>{message}</p>\n                <div className={s.likesWrapper}>\n                    <span>likes: <span className={s.likesCount}>{likesCount}</span></span>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport s from \"./MyPosts.module.scss\";\nimport style from \"./MyPosts.module.scss\";\nimport { Post } from \"./Post/Post\";\nimport { MyPostsCommonPropsType, MyPostsConnectPropsType } from \"./MyPostsContainer\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { maxLengthCreator, required } from \"../../../utils/validators/validator\";\nimport { createField, Textarea } from \"../../common/FormsControls/FormsControls\";\nimport Button from \"../../common/Button/Button\";\n\ntype FormDataType = {\n    newPostBody: string\n}\n\nconst maxLength100 = maxLengthCreator(100);\n\nconst NewPostForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField(\"Share your news here ...\", \"newPostBody\", [required, maxLength100], Textarea, {}, \"\", \"\", style.newPostCreateField)}\n            <div>\n                <Button type={\"submit\"}\n                        className={s.sendPostBtn}>\n                    Send\n                </Button>\n            </div>\n        </form>\n    )\n}\n\nconst NewPostReduxForm = reduxForm<FormDataType>({form: \"post\"})(NewPostForm);\n\nexport const MyPosts = React.memo((props: MyPostsConnectPropsType & MyPostsCommonPropsType) => {\n    let postsElements = props.posts.map((post, index) =>\n        <Post key={index}\n              message={post.message}\n              likesCount={post.likesCount}\n              userAvatar={props.userAvatar}\n        />,\n    );\n\n    const addNewPost = (formData: FormDataType) => {\n        props.addPost(formData.newPostBody);\n    }\n\n    if (!props.isOwner) return null;\n    return (\n        <div className={s.myPostsSection}>\n            <h3 className={s.myPostsTitle}>My posts</h3>\n            <div className={s.newPostSection}>\n                <NewPostReduxForm onSubmit={addNewPost}/>\n            </div>\n            <div>\n                {postsElements}\n            </div>\n        </div>\n    );\n})","import { addPost, PostsType } from \"../../../redux/reducers/profileReducer\";\nimport { MyPosts } from \"./MyPosts\";\nimport { connect } from \"react-redux\";\nimport { RootStateType } from \"../../../redux/reduxStore\";\nimport { Dispatch } from \"redux\";\n\ntype MapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\ntype MapStateToPropsType = {\n    posts: PostsType[],\n}\n\nexport type MyPostsConnectPropsType = MapStateToPropsType & MapDispatchToPropsType;\n\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n    };\n};\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPost(newPostText));\n        },\n    };\n};\n\nexport type MyPostsCommonPropsType = {\n    isOwner: boolean,\n    userAvatar: string | null | undefined,\n}\n\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, MyPostsCommonPropsType, RootStateType>\n(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from \"react\";\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\nimport { MyPostsContainer } from \"./MyPosts/MyPostsContainer\";\nimport { ProfilePropsType } from \"./ProfileContainer\";\n\nexport const Profile: React.FC<ProfilePropsType> = ({\n    profile, isOwner, status, updateStatus, savePhoto, saveProfile\n}) => {\n    return (\n        <div>\n            <ProfileInfo profile={profile}\n                         isOwner={isOwner}\n                         status={status}\n                         updateStatus={updateStatus}\n                         savePhoto={savePhoto}\n                         saveProfile={saveProfile}\n            />\n            <MyPostsContainer isOwner={isOwner}\n                              userAvatar={profile?.photos.small}\n            />\n        </div>\n    );\n}","import React from \"react\";\nimport { Profile } from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport {\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    ProfileType,\n    savePhoto,\n    saveProfile,\n} from \"../../redux/reducers/profileReducer\";\nimport { RootStateType } from \"../../redux/reduxStore\";\nimport { compose } from \"redux\";\n\ntype MapStateToPropsType = {\n    profile: null | ProfileType\n    isOwner: boolean\n    currentUser: any\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\ntype MapDispatchToPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (photoFile: File) => void\n    saveProfile: (profile: ProfileType) => any\n}\n\ntype MatchParamsType = {\n    userId: string\n}\n\nexport type ProfilePropsType = RouteComponentProps<MatchParamsType> & MapStateToPropsType & MapDispatchToPropsType\n\nclass ProfileContainer extends React.Component<ProfilePropsType> {\n    refreshProfile() {\n        let userId: number | null = Number(this.props.match.params.userId);\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n        if (typeof userId === \"number\") {\n            this.props.getUserProfile(userId);\n            this.props.getStatus(userId);\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     isOwner={\n                         // if profile id is missing in the address bar\n                         this.props.match.params.userId === undefined\n                             ? true\n                             // else compare current user id with authenticated user id\n                             : +(this.props.match.params.userId) === this.props.currentUser\n                     }\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}\n                     saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    isOwner: state.profilePage.isOwner,\n    currentUser: state.auth.userId,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n})\n\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>\n    (mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n)(ProfileContainer);"],"sourceRoot":""}