{"version":3,"sources":["components/Nav/Nav.module.scss","components/Header/Header.module.scss","redux/reducers/authReducer.ts","reportWebVitals.ts","components/SidebarFriends/SidebarFriends.tsx","components/Nav/NavContainer.tsx","components/Nav/Nav.tsx","assets/images/logo-lambo.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","redux/reducers/sidebarFriendsReducer.ts","redux/reducers/appReducer.ts","redux/reduxStore.ts","hoc/withSuspense.tsx","App.tsx","index.tsx","assets/images/cat1.jpg","assets/images/cat22.jpg","assets/images/cat44.jpg","components/common/Button/Button.tsx","components/SidebarFriends/SidebarFriends.module.scss","assets/images/user.png","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","redux/reducers/profileReducer.ts","redux/reducers/usersReducer.ts","redux/reducers/friendsReducer.ts","api/API.ts","assets/images/cat33.jpg","assets/images/cat55.jpg","redux/reducers/dialogsReducer.ts"],"names":["module","exports","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","SET_PROFILE_SMALL_PHOTO","initialState","userId","email","login","isAuth","captchaUrl","profileSmallPhoto","setAuthUserData","type","data","getCaptchaUrlSuccess","payload","getAuthUserData","dispatch","a","AuthAPI","me","response","resultCode","id","console","log","setProfileSmallPhoto","ProfileAPI","getProfileSmallPhoto","password","rememberMe","captcha","getCaptchaUrl","message","messages","length","stopSubmit","_error","securityAPI","url","logout","authReducer","state","action","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SidebarFriends","link","className","s","avatarContainer","avatar","src","alt","NavContainer","connect","friends","sidebarFriends","friendsElements","map","el","nav","nav_section","item","activeClassName","active","to","activeFriends","cn","margin","friendsContainer","Header","header","container","logo","infoContainer","AnonymousUserPhoto","Button","button","onClick","HeaderContainer","this","props","React","Component","auth","cat1","cat2","cat4","sidebarFriendsReducer","INITIALIZED_SUCCESS","initialized","appReducer","RootReducer","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","usersPage","usersReducer","friendsPage","friendsReducer","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","fallback","Music","lazy","SettingsContainer","FriendsContainer","Page404","LoginPage","UsersContainer","DialogsContainer","ProfileContainer","App","initializeApp","exact","path","render","Preloader","AppContainer","withRouter","error","SocialNetworkApp","ReactDOM","document","getElementById","restProps","finalClassName","preloader","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","posts","likesCount","profile","isOwner","status","addPost","newPostText","setStatus","getUserProfile","UsersAPI","getProfile","getStatus","updateStatus","savePhoto","photoFile","photos","saveProfile","getState","listOfSitesWithErrors","toLowerCase","match","join","Promise","reject","newPost","filter","p","postId","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","FOLLOWING_IN_PROGRESS","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","followSuccess","unFollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","getUsers","page","items","totalCount","count","follow","unFollow","userReducer","user","followed","SET_FRIENDS","SET_TOTAL_FRIENDS_COUNT","totalFriendsCount","friendId","getFriends","friend","instance","axios","create","withCredentials","baseURL","headers","get","post","delete","small","put","formData","FormData","append","SEND_DIALOG_MESSAGE","dialogs","name","avatars","cat3","cat5","sendMessage","newMessageBody","newMessageTextBody"],"mappings":"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","file":"static/js/main.3549e2a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__164Qk\",\"nav_section\":\"Nav_nav_section__2XRIx\",\"item\":\"Nav_item__1hTji\",\"active\":\"Nav_active__23yHH\",\"activeFriends\":\"Nav_activeFriends__1AP2Z\",\"friendsContainer\":\"Nav_friendsContainer__3vMcs\",\"margin\":\"Nav_margin__34MxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2Cq4Q\",\"container\":\"Header_container__3-bnu\",\"logo\":\"Header_logo__3rE7q\",\"infoContainer\":\"Header_infoContainer__pVcQL\",\"login\":\"Header_login__j98lU\",\"avatar\":\"Header_avatar__SRJaP\",\"button\":\"Header_button__2CJhZ\"};","import { AuthAPI, ProfileAPI, securityAPI } from \"../../api/API\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootStateType } from \"../reduxStore\";\nimport { FormAction, stopSubmit } from \"redux-form\";\n\nconst SET_USER_DATA = \"social_network/auth/SET-USER-DATA\";\nconst GET_CAPTCHA_URL_SUCCESS = \"social_network/auth/GET-CAPTCHA-URL-SUCCESS\";\nconst SET_PROFILE_SMALL_PHOTO = \"social_network/auth/SET-PROFILE-PHOTO\";\n\ntype AuthStateType = {\n    userId: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n    captchaUrl: string | null\n    profileSmallPhoto: string | null\n}\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null,\n    profileSmallPhoto: null,\n}\n\ntype SetUserDataActionType = ReturnType<typeof setAuthUserData>\ntype GetCaptchaUrlSuccessType = ReturnType<typeof getCaptchaUrlSuccess>\ntype SetProfilePhotoType = ReturnType<typeof setProfileSmallPhotoSuccess>\n\nexport type AuthActionsType = SetUserDataActionType | GetCaptchaUrlSuccessType | SetProfilePhotoType\n\nconst authReducer = (state: AuthStateType = initialState, action: AuthActionsType): AuthStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n            }\n        case GET_CAPTCHA_URL_SUCCESS: {\n            return {\n                ...state,\n                ...action.payload,\n            }\n        }\n        case SET_PROFILE_SMALL_PHOTO: {\n            return {\n                ...state,\n                ...action.payload,\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nexport const setAuthUserData = (\n    userId: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean,\n) =>\n    ({type: SET_USER_DATA, data: {userId, email, login, isAuth}} as const);\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => ({\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: {captchaUrl},\n} as const);\nexport const setProfileSmallPhotoSuccess = (profileSmallPhoto: string | null) => ({\n    type: SET_PROFILE_SMALL_PHOTO,\n    payload: {profileSmallPhoto},\n} as const);\n\nexport const getAuthUserData = () => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, AuthActionsType>) => {\n        try {\n            const response = await AuthAPI.me();\n            if (response.resultCode === 0) {\n                const {id, email, login} = response.data;\n                dispatch(setAuthUserData(id, email, login, true));\n            }\n        } catch (error) {\n            console.log(`Error getting auth user data. ${error}`);\n        }\n    }\n}\n\nexport const setProfileSmallPhoto = (userId: number | null) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, AuthActionsType>) => {\n        try {\n            if (userId) {\n                const response = await ProfileAPI.getProfileSmallPhoto(userId);\n                dispatch(setProfileSmallPhotoSuccess(response));\n            }\n        } catch (error) {\n            console.log(`Error setting profile small photo. ${error}`);\n        }\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, FormAction>) => {\n        try {\n            const response = await AuthAPI.login(email, password, rememberMe, captcha);\n            if (response.resultCode === 0) {\n                await dispatch(getAuthUserData());\n            } else {\n                if (response.resultCode === 10) {\n                    await dispatch(getCaptchaUrl());\n                } else {\n                    const message = response.messages.length > 0 ? response.messages[0] : \"Some error. Please reload page\";\n                    dispatch(stopSubmit(\"login\", {_error: message}));\n                }\n            }\n        } catch (error) {\n            console.log(`Error login. ${error}`);\n        }\n    }\n}\n\nexport const getCaptchaUrl = () => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, AuthActionsType>) => {\n        try {\n            const response = await securityAPI.getCaptchaUrl();\n            const captchaUrl = response.url;\n            dispatch(getCaptchaUrlSuccess(captchaUrl));\n        } catch (error) {\n            console.log(`Error getting captcha image url. ${error}`);\n        }\n    }\n}\n\nexport const logout = () => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, AuthActionsType>) => {\n        try {\n            const response = await AuthAPI.logout();\n            if (response.resultCode === 0) {\n                dispatch(setProfileSmallPhoto(null));\n                dispatch(setAuthUserData(null, null, null, false));\n            }\n        } catch (error) {\n            console.log(`Error logout. ${error}`);\n        }\n    }\n}\n\nexport default authReducer;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport s from \"./SidebarFriends.module.scss\";\n\ntype SidebarFriendsPropsType = {\n    id: number\n    link: string\n}\n\nconst SidebarFriends: React.FC<SidebarFriendsPropsType> = ({link}) => {\n    return (\n        <div className={s.avatarContainer}>\n            <img className={s.avatar} src={link} alt=\"User avatar\"/>\n        </div>\n    );\n};\n\nexport default SidebarFriends;","import { connect } from \"react-redux\";\nimport { Nav } from \"./Nav\";\nimport { Dispatch } from \"redux\";\nimport { RootStateType } from \"../../redux/reduxStore\";\nimport { FriendsType } from \"../../redux/reducers/sidebarFriendsReducer\";\n\ntype DispatchToPropsType = {}\n\ntype MapStateToPropsType = {\n  friends: FriendsType[]\n}\n\nexport type NavPropsType = MapStateToPropsType & DispatchToPropsType\n\nlet mapStateToProps = (state: RootStateType) => {\n  return {\n    friends: state.sidebarFriends.friends\n  };\n};\nlet mapDispatchToProps = (dispatch: Dispatch): DispatchToPropsType => {\n  return {};\n};\n\nexport const NavContainer = connect<MapStateToPropsType, DispatchToPropsType, {}, RootStateType>\n(mapStateToProps, mapDispatchToProps)(Nav);","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./Nav.module.scss\";\nimport { AvatarType } from \"../Dialogs/DialogsContainer\";\nimport SidebarFriends from \"../SidebarFriends/SidebarFriends\";\nimport { NavPropsType } from \"./NavContainer\";\nimport cn from \"classnames\";\n\nexport const Nav: React.FC<NavPropsType> = ({friends}) => {\n    let friendsElements = friends\n        .map((el: AvatarType) => <SidebarFriends key={el.id} link={el.link} id={el.id}/>);\n\n    return <nav className={s.nav}>\n        <div className={s.nav_section}>\n            <NavLink className={s.item} activeClassName={s.active} to=\"/profile\">Profile</NavLink>\n            <NavLink className={s.item} activeClassName={s.active} to=\"/dialogs\">Messages</NavLink>\n            <NavLink className={s.item} activeClassName={s.active} to=\"/users\">Users</NavLink>\n            <NavLink className={s.item} activeClassName={s.activeFriends} to=\"/friends\">Friends</NavLink>\n            <NavLink className={s.item} activeClassName={s.active} to=\"/music\">Music</NavLink>\n            <NavLink className={cn(s.item, s.margin)} activeClassName={s.active}\n                     to=\"/settings\">Settings</NavLink>\n            <div className={s.friendsContainer}>\n                {friendsElements}\n            </div>\n        </div>\n    </nav>;\n};","export default __webpack_public_path__ + \"static/media/logo-lambo.e0310765.png\";","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./Header.module.scss\";\nimport { HeaderPropsType } from \"./HeaderContainer\";\nimport logo from '../../assets/images/logo-lambo.png'\nimport AnonymousUserPhoto from \"../../assets/images/user.png\";\nimport Button from \"../common/Button/Button\";\n\nexport const Header: React.FC<HeaderPropsType> = ({isAuth, login, logout, profileSmallPhoto}) => {\n    return (\n        <header className={s.header}>\n            <div className={s.container}>\n                <img\n                    src={logo}\n                    alt=\"social network logo\"\n                    className={s.logo}\n                />\n\n                <div>\n                    {isAuth ?\n                        <div className={s.infoContainer}>\n                            <span className={s.login}>{login}</span>\n                            <div className={s.avatar}>\n                                <img\n                                    src={profileSmallPhoto || AnonymousUserPhoto}\n                                    alt=\"you small avatar\"/>\n                            </div>\n                            <Button className={s.button}>\n                                <NavLink onClick={logout} to={\"/login\"}>Log out</NavLink>\n                            </Button>\n                        </div>\n                        : <Button className={s.button}>\n                            <NavLink to={\"/login\"}>Login</NavLink>\n                        </Button>}\n                </div>\n            </div>\n        </header>\n    )\n}","import React from \"react\";\nimport { Header } from \"./Header\";\nimport { connect } from \"react-redux\";\nimport { getAuthUserData, logout, setProfileSmallPhoto } from \"../../redux/reducers/authReducer\";\nimport { RootStateType } from \"../../redux/reduxStore\";\n\ntype MapStateToPropsType = {\n    login: string | null\n    isAuth: boolean\n    profileSmallPhoto: string | null,\n    userId: number | null\n}\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => ({\n    login: state.auth.login,\n    isAuth: state.auth.isAuth,\n    profileSmallPhoto: state.auth.profileSmallPhoto,\n    userId: state.auth.userId,\n})\n\ntype MapDispatchToPropsType = {\n    getAuthUserData: () => void\n    logout: () => void\n    setProfileSmallPhoto: (userId: number) => void\n}\n\nexport type HeaderPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nclass HeaderContainer extends React.Component<HeaderPropsType> {\n    componentDidMount() {\n        this.props.getAuthUserData();\n        if (this.props.userId) {\n            this.props.setProfileSmallPhoto(this.props.userId);\n        }\n    }\n\n    render() {\n        return <Header {...this.props}/>\n    }\n}\n\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>\n(mapStateToProps, {getAuthUserData, logout, setProfileSmallPhoto})(HeaderContainer);","import cat1 from '../../assets/images/cat1.jpg'\nimport cat2 from '../../assets/images/cat22.jpg'\nimport cat4 from '../../assets/images/cat44.jpg'\n\nexport type FriendsType = {\n    id: number\n    link: string\n}\n\ntype SidebarFriendsStateType = {\n    friends: FriendsType[]\n}\n\nlet initialState = {\n    friends: [\n        {id: 1, link: cat1},\n        {id: 2, link: cat2},\n        {id: 3, link: cat4},\n    ],\n}\n\nconst sidebarFriendsReducer = (state: SidebarFriendsStateType = initialState): SidebarFriendsStateType => {\n    return state;\n}\n\nexport default sidebarFriendsReducer;","import { ThunkDispatch } from \"redux-thunk\";\nimport { RootStateType } from \"../reduxStore\";\nimport { getAuthUserData } from \"./authReducer\";\n\nconst INITIALIZED_SUCCESS = \"social_network/app/INITIALIZED-SUCCESS\";\n\ntype AppStateType = {\n    initialized: boolean\n}\n\nlet initialState = {\n    initialized: false,\n}\n\ntype SetUserDataActionType = ReturnType<typeof initializedSuccess>\n\nexport type InitializeActionsType = SetUserDataActionType\n\nexport const appReducer = (state: AppStateType = initialState, action: InitializeActionsType): AppStateType => {\n    switch (action.type) {\n        case INITIALIZED_SUCCESS: {\n            return {\n                ...state,\n                initialized: true,\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nexport const initializedSuccess = () =>\n    ({type: INITIALIZED_SUCCESS} as const);\n\nexport const initializeApp = () => {\n    return (dispatch: ThunkDispatch<RootStateType, unknown, InitializeActionsType>) => {\n        try {\n            let promise = dispatch(getAuthUserData());\n            promise\n                .then(() => {\n                    dispatch(initializedSuccess());\n                })\n        } catch (error) {\n            console.log(`Error initialization app. ${error}`);\n        }\n    }\n}\n\nexport default appReducer;","import { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\nimport profileReducer, {\n    ProfileActionsType,\n} from \"./reducers/profileReducer\";\nimport dialogsReducer, {\n    DialogsActionsType,\n} from \"./reducers/dialogsReducer\";\nimport sidebarFriendsReducer from \"./reducers/sidebarFriendsReducer\";\nimport usersReducer, { UserActionsType } from \"./reducers/usersReducer\";\nimport friendsReducer, { FriendActionsType } from \"./reducers/friendsReducer\";\nimport authReducer, { AuthActionsType } from \"./reducers/authReducer\";\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";\nimport { reducer as formReducer } from \"redux-form\"\nimport appReducer, { InitializeActionsType } from \"./reducers/appReducer\";\n\nlet RootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebarFriends: sidebarFriendsReducer,\n    usersPage: usersReducer,\n    friendsPage: friendsReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n});\n\ntype RootReducerType = typeof RootReducer;\nexport type RootStateType = ReturnType<RootReducerType>\n\nexport type RootActionsType = ProfileActionsType\n    | DialogsActionsType\n    | UserActionsType\n    | FriendActionsType\n    | AuthActionsType\n    | InitializeActionsType\n\nexport type RootThunk<ReturnType = void> = ThunkAction<ReturnType, RootStateType, unknown, RootActionsType>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(RootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\nexport default store;","import React, { ComponentType, Suspense } from \"react\";\n\nexport const withSuspense = (Component: ComponentType) => {\n    return (props: any) => {\n        return <Suspense fallback={<div>Loading...</div>}>\n            <Component {...props}/>\n        </Suspense>\n    }\n}","import React from \"react\";\nimport \"./App.scss\";\nimport \"./Reset.scss\";\nimport { HashRouter, Redirect, Route, Switch, withRouter } from \"react-router-dom\";\nimport { NavContainer } from \"./components/Nav/NavContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport { connect, Provider } from \"react-redux\";\nimport { compose } from \"redux\";\nimport store, { RootStateType } from \"./redux/reduxStore\";\nimport { initializeApp } from \"./redux/reducers/appReducer\";\nimport { Preloader } from \"./components/common/Preloader/Preloader\";\nimport { withSuspense } from \"./hoc/withSuspense\";\n\nconst Music = React.lazy(() => import (\"./components/Music/Music\"));\nconst SettingsContainer = React.lazy(() => import (\"./components/Settings/SettingsContainer\"));\nconst FriendsContainer = React.lazy(() => import (\"./components/Friends/FriendsContainer\"));\nconst Page404 = React.lazy(() => import (\"./components/Page404/Page404\"));\nconst LoginPage = React.lazy(() => import (\"./components/Login/Login\"));\nconst UsersContainer = React.lazy(() => import (\"./components/Users/UsersContainer\"));\nconst DialogsContainer = React.lazy(() => import (\"./components/Dialogs/DialogsContainer\"));\nconst ProfileContainer = React.lazy(() => import (\"./components/Profile/ProfileContainer\"));\n\ntype MapDispatchToPropsType = {\n    initializeApp: () => void\n}\n\ntype MapStateToPropsType = {\n    initialized: boolean\n}\n\nconst mapStateToProps = (state: RootStateType) => ({\n    initialized: state.app.initialized,\n})\n\nexport type AppPropsType = MapStateToPropsType & MapDispatchToPropsType;\n\nclass App extends React.Component<AppPropsType> {\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div>\n                <HeaderContainer/>\n                <div className=\"main-wrapper\">\n                    <NavContainer/>\n                    <div className=\"main-content\">\n                        <Switch>\n                            <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"}/>}/>\n                            <Route path=\"/profile/:userId?\" render={withSuspense(ProfileContainer)}/>\n                            <Route path=\"/dialogs\" render={withSuspense(DialogsContainer)}/>\n                            <Route path=\"/users\" render={withSuspense(UsersContainer)}/>\n                            <Route path=\"/login\" render={withSuspense(LoginPage)}/>\n                            <Route path=\"/music\" render={withSuspense(Music)}/>\n                            <Route path=\"/settings\" render={withSuspense(SettingsContainer)}/>\n                            <Route path=\"/friends\" render={withSuspense(FriendsContainer)}/>\n                            <Route path=\"/*\" render={withSuspense(Page404)}/>\n                        </Switch>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>\n    (mapStateToProps, {initializeApp}))(App);\n\nconst SocialNetworkApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default SocialNetworkApp;","import reportWebVitals from \"./reportWebVitals\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport SocialNetworkApp from \"./App\";\n\nReactDOM.render(\n    <SocialNetworkApp/>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","export default __webpack_public_path__ + \"static/media/cat1.36eee12a.jpg\";","export default __webpack_public_path__ + \"static/media/cat22.3d09829c.jpg\";","export default __webpack_public_path__ + \"static/media/cat44.25de4ef1.jpg\";","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\n\n// type of button props. Children in which the name of the button is stored is already described there\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    //red?: boolean\n}\n\nconst Button: React.FC<SuperButtonPropsType> = (\n    {\n        className,\n        ...restProps // all other props will go to the restProps object, there will also be children\n    },\n) => {\n    const finalClassName = `${className}`;\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // give the button the rest of the props, if any (including children)\n        />\n    )\n}\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarContainer\":\"SidebarFriends_avatarContainer__3Nbm0\",\"avatar\":\"SidebarFriends_avatar__cxAKP\"};","export default __webpack_public_path__ + \"static/media/user.d55bc70d.png\";","export default __webpack_public_path__ + \"static/media/preloader.0b1bc3ab.svg\";","import React from \"react\";\nimport preloader from \"../../../assets/images/preloader.svg\";\n\nexport let Preloader = () => {\n    return <div>\n        <img src={preloader} alt=\"preloader animation\"/>\n    </div>\n}","import { ProfileAPI, UsersAPI } from \"../../api/API\";\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { RootStateType } from \"../reduxStore\";\nimport { FormAction, stopSubmit } from \"redux-form\";\n\nconst ADD_POST = \"social_network/profile/ADD-POST\";\nconst SET_USER_PROFILE = \"social_network/profile/SET-USER-PROFILE\";\nconst SET_STATUS = \"social_network/profile/SET-STATUS\";\nconst DELETE_POST = \"social_network/profile/DELETE-POST\";\nconst SAVE_PHOTO_SUCCESS = \"social_network/profile/SAVE-PHOTO-SUCCESS\";\n\nexport type PostsType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\ntype PhotosType = {\n    small: string | null\n    large: string | null\n}\n\nexport type ProfileContacts = {\n    facebook: string | null\n    github: string | null\n    instagram: string | null\n    mainLink: string | null\n    twitter: string | null\n    vk: string | null\n    website: string | null\n    youtube: string | null\n}\n\nexport type ProfileType = {\n    aboutMe: string | null\n    contacts: ProfileContacts\n    fullName: string | null\n    lookingForAJob: boolean | null\n    lookingForAJobDescription: string | null\n    photos: PhotosType\n    userId: number\n}\n\ntype ProfileStateType = {\n    posts: Array<PostsType>\n    profile: ProfileType | null\n    isOwner: boolean\n    status: string\n}\n\nlet initialState = {\n    posts: [\n        {id: 1, message: \"It's my first post.\", likesCount: 20},\n        {id: 2, message: \"Hello, welcome!\", likesCount: 15},\n    ],\n    profile: null,\n    isOwner: false, // not use, need for TS\n    status: \"\",\n}\n\ntype AddPostActionType = ReturnType<typeof addPost>\ntype SetUserProfileActionType = ReturnType<typeof setUserProfile>\ntype SetStatusActionType = ReturnType<typeof setStatus>\ntype DeletePostActionType = ReturnType<typeof deletePost>\ntype SetPhotoSuccessActionType = ReturnType<typeof setPhotoSuccess>\n\nexport type ProfileActionsType = AddPostActionType\n    | SetUserProfileActionType\n    | SetStatusActionType\n    | DeletePostActionType\n    | SetPhotoSuccessActionType\n\nconst profileReducer = (state: ProfileStateType = initialState, action: ProfileActionsType): ProfileStateType => {\n    switch (action.type) {\n        case ADD_POST: {\n            let newPost: PostsType = {\n                id: state.posts.length + 1,\n                message: action.newPostText,\n                likesCount: 0,\n            };\n            return {\n                ...state,\n                posts: [newPost, ...state.posts],\n            };\n        }\n        case SET_USER_PROFILE: {\n            return {\n                ...state,\n                profile: action.profile,\n            }\n        }\n        case SET_STATUS: {\n            return {\n                ...state,\n                status: action.status,\n            }\n        }\n        case DELETE_POST: {\n            return {\n                ...state,\n                posts: state.posts.filter(p => p.id !== action.postId),\n            }\n        }\n        case SAVE_PHOTO_SUCCESS: {\n            return {\n                ...state,\n                profile: {...state.profile!, photos: action.photos},\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nexport const addPost = (newPostText: string) =>\n    ({type: ADD_POST, newPostText} as const)\nexport const setUserProfile = (profile: null | ProfileType) =>\n    ({type: SET_USER_PROFILE, profile} as const)\nexport const setStatus = (status: string) =>\n    ({type: SET_STATUS, status} as const)\nexport const deletePost = (postId: number) =>\n    ({type: DELETE_POST, postId} as const)\nexport const setPhotoSuccess = (photos: PhotosType) =>\n    ({type: SAVE_PHOTO_SUCCESS, photos} as const)\n\nexport const getUserProfile = (userId: number) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, ProfileActionsType>) => {\n        try {\n            const response = await UsersAPI.getProfile(userId);\n            dispatch(setUserProfile(response));\n        } catch (error) {\n            console.log(`Error getting user profile. ${error}`);\n        }\n    };\n}\n\nexport const getStatus = (userId: number) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, ProfileActionsType>) => {\n        try {\n            const response = await ProfileAPI.getStatus(userId);\n            dispatch(setStatus(response));\n        } catch (error) {\n            console.log(`Error getting status. ${error}`);\n        }\n    };\n}\n\nexport const updateStatus = (status: string) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, ProfileActionsType>) => {\n        try {\n            const response = await ProfileAPI.updateStatus(status);\n            if (response.resultCode === 0) {\n                dispatch(setStatus(status));\n            }\n        } catch (error) {\n            console.log(`Error updating status. ${error}`);\n        }\n    };\n}\n\nexport const savePhoto = (photoFile: File) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, ProfileActionsType>) => {\n        try {\n            const response = await ProfileAPI.savePhoto(photoFile);\n            if (response.resultCode === 0) {\n                dispatch(setPhotoSuccess(response.data.photos));\n            }\n        } catch (error) {\n            console.log(`Error save avatar. ${error}`);\n        }\n    };\n}\n\nexport type SaveProfileThunkType = ThunkAction<Promise<any>, RootStateType, unknown, FormAction>\n\nexport const saveProfile = (profile: ProfileType): SaveProfileThunkType => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, FormAction>, getState: () => RootStateType) => {\n        try {\n            const userId = getState().auth.userId;\n            const response = await ProfileAPI.saveProfile(profile);\n            if (response.resultCode === 0 && userId) {\n                await dispatch(getUserProfile(userId));\n            } else {\n                let listOfSitesWithErrors = response.messages.map((el: string) => {\n                    return (el.toLowerCase()).match(/(?<=>)\\D+[^)]/ig)![0];\n                })\n                listOfSitesWithErrors = listOfSitesWithErrors.join(\", \");\n                if (response.messages.length === 1) {\n                    dispatch(stopSubmit(\"edit-profile\",\n                        {_error: `Invalid url format in ${listOfSitesWithErrors} input`}));\n                } else {\n                    dispatch(stopSubmit(\"edit-profile\",\n                        {_error: `Invalid url format in inputs: ${listOfSitesWithErrors}`}));\n                }\n                // dispatch(stopSubmit(\"edit-profile\", {\"contacts\": {\"facebook\": response.messages[0]}}));\n                return Promise.reject(response.messages);\n            }\n        } catch (error) {\n            console.log(`Error saving profile information. ${error}`);\n        }\n    };\n}\n\nexport default profileReducer;","import { UsersAPI } from \"../../api/API\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootStateType } from \"../reduxStore\";\n\nconst FOLLOW = \"social_network/user/FOLLOW\";\nconst UNFOLLOW = \"social_network/user/UNFOLLOW\";\nconst SET_USERS = \"social_network/user/SET-USERS\";\nconst SET_CURRENT_PAGE = \"social_network/user/SET-CURRENT-PAGE\";\nconst SET_TOTAL_USERS_COUNT = \"social_network/user/SET-TOTAL-USERS-COUNT\";\nconst TOGGLE_IS_FETCHING = \"social_network/user/TOGGLE-IS-FETCHING\";\nconst FOLLOWING_IN_PROGRESS = \"social_network/user/FOLLOWING-IN-PROGRESS\";\n\nexport type UserType = {\n    followed: boolean\n    id: number\n    name: string\n    photos: {\n        small: string | null | undefined,\n        large: string | null | undefined,\n    }\n    status: string | null\n    uniqueUrlName: string | null\n}\n\ntype UsersStateType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n    isOwner: number | null\n}\n\nlet initialState = {\n    users: [],\n    pageSize: 20,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [],\n    isOwner: null, // not use, need for TS\n}\n\ntype FollowActionType = ReturnType<typeof followSuccess>\ntype UnFollowActionType = ReturnType<typeof unFollowSuccess>\ntype SetUsersActionType = ReturnType<typeof setUsers>\ntype SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\ntype SetTotalUsersCountActionType = ReturnType<typeof setTotalUsersCount>\ntype ToggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>\ntype FollowingInProgressActionType = ReturnType<typeof toggleFollowingProgress>\n\nexport type UserActionsType = FollowActionType\n    | UnFollowActionType\n    | SetUsersActionType\n    | SetCurrentPageActionType\n    | SetTotalUsersCountActionType\n    | ToggleIsFetchingActionType\n    | FollowingInProgressActionType\n\nconst userReducer = (state: UsersStateType = initialState, action: UserActionsType): UsersStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(user => {\n                    if (user.id === action.userId) {\n                        return {...user, followed: true};\n                    } else return user;\n                }),\n            };\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(user => {\n                    if (user.id === action.userId) {\n                        return {...user, followed: false};\n                    } else return user;\n                }),\n            };\n        case SET_USERS: {\n            return {...state, users: [...action.users]};\n        }\n        case SET_CURRENT_PAGE: {\n            return {...state, currentPage: action.currentPage}\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return {...state, totalUsersCount: action.count}\n        }\n        case TOGGLE_IS_FETCHING: {\n            return {...state, isFetching: action.isFetching}\n        }\n        case FOLLOWING_IN_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId),\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nexport const followSuccess = (userId: number) =>\n    ({type: FOLLOW, userId} as const)\nexport const unFollowSuccess = (userId: number) =>\n    ({type: UNFOLLOW, userId} as const)\nexport const setUsers = (users: Array<UserType>) =>\n    ({type: SET_USERS, users} as const)\nexport const setCurrentPage = (currentPage: number) =>\n    ({type: SET_CURRENT_PAGE, currentPage} as const)\nexport const setTotalUsersCount = (totalUsersCount: number) =>\n    ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount} as const)\nexport const toggleIsFetching = (isFetching: boolean) =>\n    ({type: TOGGLE_IS_FETCHING, isFetching} as const)\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) =>\n    ({type: FOLLOWING_IN_PROGRESS, isFetching, userId} as const)\n\nexport const getUsers = (page: number, pageSize: number) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, UserActionsType>) => {\n        try {\n            dispatch(toggleIsFetching(true));\n            dispatch(setCurrentPage(page));\n            let response = await UsersAPI.getUsers(page, pageSize);\n            dispatch(toggleIsFetching(false));\n            dispatch(setUsers(response.items));\n            dispatch(setTotalUsersCount(response.totalCount));\n        } catch (error) {\n            console.log(`Error getting users. ${error}`);\n        }\n    }\n}\n\nexport const follow = (userId: number) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, UserActionsType>) => {\n        try {\n            dispatch(toggleFollowingProgress(true, userId));\n            let response = await UsersAPI.follow(userId);\n            if (response.resultCode === 0) {\n                dispatch(followSuccess(userId));\n            }\n            dispatch(toggleFollowingProgress(false, userId));\n        } catch (error) {\n            console.log(`Error following. ${error}`);\n        }\n    }\n}\n\nexport const unFollow = (userId: number) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, UserActionsType>) => {\n        try {\n            dispatch(toggleFollowingProgress(true, userId));\n            let response = await UsersAPI.unFollow(userId);\n            if (response.resultCode === 0) {\n                dispatch(unFollowSuccess(userId));\n            }\n            dispatch(toggleFollowingProgress(false, userId));\n        } catch (error) {\n            console.log(`Error unfollowing. ${error}`);\n        }\n    }\n}\n\nexport default userReducer;","import { UsersAPI } from \"../../api/API\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootStateType } from \"../reduxStore\";\n\nconst FOLLOW = \"social_network/friend/FOLLOW\";\nconst UNFOLLOW = \"social_network/friend/UNFOLLOW\";\nconst SET_FRIENDS = \"social_network/friend/SET-FRIENDS\";\nconst SET_CURRENT_PAGE = \"social_network/friend/SET-CURRENT-PAGE\";\nconst SET_TOTAL_FRIENDS_COUNT = \"social_network/friend/SET-TOTAL-FRIENDS-COUNT\";\nconst TOGGLE_IS_FETCHING = \"social_network/friend/TOGGLE-IS-FETCHING\";\nconst FOLLOWING_IN_PROGRESS = \"social_network/friend/FOLLOWING-IN-PROGRESS\";\n\nexport type FriendType = {\n    followed: boolean\n    id: number\n    name: string\n    photos: {\n        small: string | null | undefined,\n        large: string | null | undefined,\n    }\n    status: string | null\n    uniqueUrlName: string | null\n}\n\ntype FriendsStateType = {\n    friends: Array<FriendType>\n    pageSize: number\n    totalFriendsCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<number>\n    isOwner: number | null\n}\n\nlet initialState = {\n    friends: [],\n    pageSize: 20,\n    totalFriendsCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [],\n    isOwner: null, // not use, need for TS\n}\n\ntype FollowActionType = ReturnType<typeof followSuccess>\ntype UnFollowActionType = ReturnType<typeof unFollowSuccess>\ntype SetFriendsActionType = ReturnType<typeof setFriends>\ntype SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\ntype SetTotalFriendsCountActionType = ReturnType<typeof setTotalFriendsCount>\ntype ToggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>\ntype FollowingInProgressActionType = ReturnType<typeof toggleFollowingProgress>\n\nexport type FriendActionsType = FollowActionType\n    | UnFollowActionType\n    | SetFriendsActionType\n    | SetCurrentPageActionType\n    | SetTotalFriendsCountActionType\n    | ToggleIsFetchingActionType\n    | FollowingInProgressActionType\n\nconst friendsReducer = (state: FriendsStateType = initialState, action: FriendActionsType): FriendsStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                friends: state.friends.map(friend => {\n                    if (friend.id === action.friendId) {\n                        return {...friend, followed: true};\n                    } else return friend;\n                }),\n            };\n        case UNFOLLOW:\n            return {\n                ...state,\n                friends: state.friends.map(friend => {\n                    if (friend.id === action.friendId) {\n                        return {...friend, followed: false};\n                    } else return friend;\n                }),\n            };\n        case SET_FRIENDS: {\n            return {...state, friends: [...action.friends]};\n        }\n        case SET_CURRENT_PAGE: {\n            return {...state, currentPage: action.currentPage}\n        }\n        case SET_TOTAL_FRIENDS_COUNT: {\n            return {...state, totalFriendsCount: action.count}\n        }\n        case TOGGLE_IS_FETCHING: {\n            return {...state, isFetching: action.isFetching}\n        }\n        case FOLLOWING_IN_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.friendId]\n                    : state.followingInProgress.filter(id => id !== action.friendId),\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nexport const followSuccess = (friendId: number) =>\n    ({type: FOLLOW, friendId} as const)\nexport const unFollowSuccess = (friendId: number) =>\n    ({type: UNFOLLOW, friendId} as const)\nexport const setFriends = (friends: Array<FriendType>) =>\n    ({type: SET_FRIENDS, friends} as const)\nexport const setCurrentPage = (currentPage: number) =>\n    ({type: SET_CURRENT_PAGE, currentPage} as const)\nexport const setTotalFriendsCount = (totalFriendsCount: number) =>\n    ({type: SET_TOTAL_FRIENDS_COUNT, count: totalFriendsCount} as const)\nexport const toggleIsFetching = (isFetching: boolean) =>\n    ({type: TOGGLE_IS_FETCHING, isFetching} as const)\nexport const toggleFollowingProgress = (isFetching: boolean, friendId: number) =>\n    ({type: FOLLOWING_IN_PROGRESS, isFetching, friendId} as const)\n\nexport const getFriends = (page: number, pageSize: number) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, FriendActionsType>) => {\n        try {\n            dispatch(toggleIsFetching(true));\n            dispatch(setCurrentPage(page));\n            let response = await UsersAPI.getFriends(page, pageSize);\n            dispatch(toggleIsFetching(false));\n            dispatch(setFriends(response.items));\n            dispatch(setTotalFriendsCount(response.totalCount));\n        } catch (error) {\n            console.log(`Error getting friends. ${error}`);\n        }\n    }\n}\n\nexport const follow = (friendId: number) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, FriendActionsType>) => {\n        try {\n            dispatch(toggleFollowingProgress(true, friendId));\n            let response = await UsersAPI.follow(friendId);\n            if (response.resultCode === 0) {\n                dispatch(followSuccess(friendId));\n            }\n            dispatch(toggleFollowingProgress(false, friendId));\n        } catch (error) {\n            console.log(`Error following. ${error}`);\n        }\n    }\n}\n\nexport const unFollow = (friendId: number) => {\n    return async (dispatch: ThunkDispatch<RootStateType, unknown, FriendActionsType>) => {\n        try {\n            dispatch(toggleFollowingProgress(true, friendId));\n            let response = await UsersAPI.unFollow(friendId);\n            if (response.resultCode === 0) {\n                dispatch(unFollowSuccess(friendId));\n            }\n            dispatch(toggleFollowingProgress(false, friendId));\n        } catch (error) {\n            console.log(`Error unfollowing. ${error}`);\n        }\n    }\n}\n\nexport default friendsReducer;","import axios from \"axios\";\nimport { UserType } from \"../redux/reducers/usersReducer\";\nimport { ProfileType } from \"../redux/reducers/profileReducer\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\n    headers: {\"API-KEY\": \"34c4f502-d7f5-47ba-9bb6-a6e835a2121e\"},\n});\n\ntype GetUsersResponseType = {\n    error: null | any\n    items: Array<UserType>\n    totalCount: number\n}\n\ntype GetProfileResponseType = ProfileType\n\ntype FollowResponseType = {\n    data: {}\n    fieldsErrors: Array<any>\n    messages: Array<any>\n    resultCode: number\n}\n\nexport const UsersAPI = {\n    getUsers(currentPage = 1, pageSize = 1) {\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data);\n    },\n\n    getFriends(currentPage = 1, pageSize = 1) {\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}&friend=true`)\n            .then(response => response.data);\n    },\n\n    getProfile(userId: number) {\n        return ProfileAPI.getProfile(userId);\n    },\n\n    follow(userId: number) {\n        return instance.post<FollowResponseType>(`follow/${userId}`, {})\n            .then(response => response.data);\n    },\n\n    unFollow(userId: number) {\n        return instance.delete<FollowResponseType>(`follow/${userId}`)\n            .then(response => response.data);\n    },\n}\n\nexport const ProfileAPI = {\n    getProfile(userId: number) {\n        return instance.get<GetProfileResponseType>(`profile/${userId}`)\n            .then(response => response.data);\n    },\n    getProfileSmallPhoto(userId: number) {\n        return instance.get<GetProfileResponseType>(`profile/${userId}`)\n            .then(response => response.data.photos.small);\n    },\n    getStatus(userId: number) {\n        return instance.get(`profile/status/` + userId)\n            .then(response => response.data);\n    },\n    updateStatus(status: string) {\n        return instance.put(`profile/status/`, {status: status})\n            .then(response => response.data);\n    },\n    savePhoto(photoFile: File) {\n        let formData = new FormData();\n        formData.append(\"image\", photoFile);\n        return instance.put(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n            .then(response => response.data);\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put(`profile`, profile)\n            .then(response => response.data);\n    },\n}\n\nexport const AuthAPI = {\n    me() {\n        return instance.get(`auth/me`)\n            .then(response => response.data);\n    },\n    login(email: string, password: string, rememberMe: boolean = false, captcha: null | string) {\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\n            .then(response => response.data);\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n            .then(response => response.data);\n    },\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get(`security/get-captcha-url`)\n            .then(response => response.data);\n    },\n}","export default __webpack_public_path__ + \"static/media/cat33.64e53b8a.jpg\";","export default __webpack_public_path__ + \"static/media/cat55.0bc8df79.jpg\";","import { AvatarType, DialogType, MessageType } from \"../../components/Dialogs/DialogsContainer\";\nimport cat1 from '../../assets/images/cat1.jpg'\nimport cat2 from '../../assets/images/cat22.jpg'\nimport cat3 from '../../assets/images/cat33.jpg'\nimport cat4 from '../../assets/images/cat44.jpg'\nimport cat5 from '../../assets/images/cat55.jpg'\n\nconst SEND_DIALOG_MESSAGE = \"social_network/dialogs/SEND-DIALOG-MESSAGE\";\n\ntype DialogsStateType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n    avatars: Array<AvatarType>\n}\n\nlet initialState = {\n    dialogs: [\n        {id: 1, name: \"Dimych\"},\n        {id: 2, name: \"Valera\"},\n        {id: 3, name: \"Katya\"},\n        {id: 4, name: \"Andrei\"},\n        {id: 5, name: \"Viktor\"},\n    ],\n    messages: [\n        {id: 1, message: \"Hello!\"},\n        {id: 2, message: \"Yo!\"},\n        {id: 3, message: \"How are you ?\"},\n        {id: 4, message: \"This social network is awesome!\"},\n    ],\n    avatars: [\n        {id: 1, link: cat1},\n        {id: 2, link: cat2},\n        {id: 3, link: cat3},\n        {id: 4, link: cat4},\n        {id: 5, link: cat5},\n    ],\n}\n\ntype SendDialogMessageActionType = ReturnType<typeof sendMessage>\n\nexport type DialogsActionsType = SendDialogMessageActionType\n\nconst dialogsReducer = (state: DialogsStateType = initialState, action: DialogsActionsType): DialogsStateType => {\n    switch (action.type) {\n        case SEND_DIALOG_MESSAGE: {\n            let newMessageTextBody = action.newMessageBody;\n            return {\n                ...state,\n                messages: [...state.messages, {id: state.messages.length + 1, message: newMessageTextBody}],\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport const sendMessage = (newMessageBody: string) =>\n    ({type: SEND_DIALOG_MESSAGE, newMessageBody} as const)\n\nexport default dialogsReducer;"],"sourceRoot":""}