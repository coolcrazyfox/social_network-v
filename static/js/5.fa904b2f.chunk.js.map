{"version":3,"sources":["components/common/FormsControls/FormsControls.module.scss","components/common/FormsControls/FormsControls.tsx","utils/validators/validator.tsx","components/Dialogs/Dialogs.module.scss","components/Dialogs/DialogsItem/DialogsItem.module.scss","components/Dialogs/Message/Message.module.scss","components/Dialogs/AvatarsItem/AvatarsItem.module.scss","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AvatarsItem/AvatarsItem.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FormControl","input","meta","props","hasError","error","touched","className","s","formControlError","children","Textarea","restProps","Input","createField","placeholder","name","validators","component","text","wrapperClass","fieldClass","validate","required","value","maxLengthCreator","maxLength","length","DialogItem","id","path","to","activeClassName","active","dialog","Message","message","AvatarItem","link","avatar","src","alt","maxLength100","NewMessageReduxForm","reduxForm","form","handleSubmit","onSubmit","Button","type","sendButton","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogs","dialogsPage","messages","avatars","dispatch","sendMessage","newMessageBody","Component","avatarsElements","map","el","dialogsElements","messagesElements","container","dialogsItems","inputContainer","formData"],"mappings":"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","file":"static/js/5.fa904b2f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControlError\":\"FormsControls_formControlError__VBZAh\",\"formSummaryError\":\"FormsControls_formSummaryError__1zq_V\"};","import React from \"react\";\nimport s from \"./FormsControls.module.scss\"\nimport { Field } from \"redux-form\";\n\nexport const FormControl: React.FC<any> = ({input, meta, ...props}) => {\n    const hasError = meta.error && meta.touched;\n    return (\n        <div className={hasError ? s.formControlError : \"\"}>\n            <div>\n                {props.children}\n            </div>\n            <div>\n                {hasError && <span>{meta.error}</span>}\n            </div>\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, children, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\n}\n\nexport const Input = (props: any) => {\n    const {input, meta, children, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n}\n\nexport const createField = (placeholder: string = \"\", name: string, validators: Array<any>, component: any,\n    props = {}, text: string = \"\", wrapperClass: any, fieldClass: any) => (\n    <div className={wrapperClass}>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validators}\n               component={component}\n               {...props}\n               className={fieldClass}\n        />\n        {text}\n    </div>\n)","export const required = (value: string) => {\n    if (value) {\n        return undefined;\n    }\n    return \"Field is required\";\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value && value.length > maxLength) {\n        return `Max length is ${maxLength} symbols`;\n    }\n    return undefined;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__35mqr\",\"dialogs\":\"Dialogs_dialogs__2jAg0\",\"dialogsItems\":\"Dialogs_dialogsItems__7e0LB\",\"messages\":\"Dialogs_messages__20Sls\",\"inputContainer\":\"Dialogs_inputContainer__2Ogn9\",\"input\":\"Dialogs_input__vanvh\",\"sendButton\":\"Dialogs_sendButton__gEmEg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog___98rR\",\"active\":\"DialogsItem_active__o0qvv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2tWB-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"AvatarsItem_avatar__18lCk\"};","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./DialogsItem.module.scss\";\n\ntype DialogItemPropsType = {\n    id: number\n    name: string\n}\n\nconst DialogItem: React.FC<DialogItemPropsType> = ({id, name}) => {\n    let path = \"/dialogs/\" + id;\n    return (\n        <NavLink to={path} activeClassName={s.active} className={s.dialog}>\n            {name}\n        </NavLink>\n    );\n};\n\nexport default DialogItem;","import React from \"react\";\nimport s from \"./Message.module.scss\";\n\ntype messagePropsType = {\n    message: string\n    id: number\n}\n\nconst Message: React.FC<messagePropsType> = ({message}) => {\n    return (\n        <div>\n            <span className={s.message}>{message}</span>\n        </div>\n    );\n};\n\nexport default Message;","import React from \"react\";\nimport s from \"./AvatarsItem.module.scss\";\n\nexport type AvatarItemPropsType = {\n    id: number\n    link: string\n}\n\nconst AvatarItem: React.FC<AvatarItemPropsType> = ({link}) => {\n    return (\n        <div>\n            <img className={s.avatar} src={link} alt=\"User avatar\"/>\n        </div>\n    );\n};\n\nexport default AvatarItem;","import React from \"react\";\nimport s from \"./Dialogs.module.scss\";\nimport DialogItem from \"./DialogsItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport AvatarItem from \"./AvatarsItem/AvatarsItem\";\nimport { DialogsPropsType } from \"./DialogsContainer\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { createField, Textarea } from \"../common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/validators/validator\";\nimport Button from \"../common/Button/Button\";\n\ntype FormDataType = {\n    newMessageBody: string\n}\n\nconst maxLength100 = maxLengthCreator(100);\n\nconst NewMessageForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField(\"Enter your message\", \"newMessageBody\", [required, maxLength100], Textarea, {}, \"\", \"\", s.input)}\n            <div>\n                <Button type={\"submit\"}\n                        className={s.sendButton}>\n                    Send\n                </Button>\n            </div>\n        </form>\n    )\n}\n\nconst NewMessageReduxForm = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(NewMessageForm)\n\nexport const Dialogs = (props: DialogsPropsType) => {\n    let avatarsElements = props.avatars\n        .map(el => <AvatarItem key={el.id} link={el.link} id={el.id}/>);\n\n    let dialogsElements = props.dialogs\n        .map(el => <DialogItem key={el.id} name={el.name} id={el.id}/>);\n\n    let messagesElements = props.messages\n        .map(el => <Message key={el.id} message={el.message} id={el.id}/>);\n\n    const addNewMessage = (formData: FormDataType) => {\n        props.sendMessage(formData.newMessageBody)\n    }\n\n    return (\n        <div className={s.container}>\n            <div className={s.dialogs}>\n                <div className={s.dialogsItems}>\n                    {avatarsElements}\n                </div>\n                <div className={s.dialogsItems}>\n                    {dialogsElements}\n                </div>\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <div className={s.inputContainer}>\n                    <NewMessageReduxForm onSubmit={addNewMessage}/>\n                </div>\n            </div>\n        </div>\n    );\n};","import { Redirect } from \"react-router-dom\";\nimport React, { ComponentType } from \"react\";\nimport { connect } from \"react-redux\";\nimport { RootStateType } from \"../redux/reduxStore\";\n\ntype mapStateToPropsForRedirectType = {\n    isAuth: boolean\n}\n\nlet mapStateToPropsForRedirect = (state: RootStateType): mapStateToPropsForRedirectType => ({\n    isAuth: state.auth.isAuth,\n})\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    function RedirectComponent(props: mapStateToPropsForRedirectType) {\n        let {isAuth, ...restProps} = props;\n        if (!isAuth) return <Redirect to={\"/login\"}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}","import { sendMessage } from \"../../redux/reducers/dialogsReducer\";\nimport { connect } from \"react-redux\";\nimport { Dialogs } from \"./Dialogs\";\nimport { compose, Dispatch } from \"redux\";\nimport { RootStateType } from \"../../redux/reduxStore\";\nimport React from \"react\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\n\nexport type DialogType = {\n    id: number\n    name: string\n}\n\nexport type MessageType = {\n    id: number\n    message: string\n}\n\nexport type AvatarType = {\n    id: number\n    link: string\n}\n\nexport type MapStateToPropsType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n    avatars: Array<AvatarType>\n}\n\ntype MapDispatchToPropsType = {\n    sendMessage: (newMessageBody: string) => void\n}\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType;\n\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        messages: state.dialogsPage.messages,\n        avatars: state.dialogsPage.avatars,\n    };\n};\n\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(sendMessage(newMessageBody));\n        },\n    };\n};\n\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>\n    (mapStateToProps, mapDispatchToProps),\n    withAuthRedirect,\n)(Dialogs);"],"sourceRoot":""}