{"version":3,"sources":["components/Settings/Settings.module.scss","components/Settings/Settings.tsx","components/Settings/SettingsContainer.tsx"],"names":["module","exports","Settings","isOwner","logout","className","s","buttonsContainer","onClick","button","to","withoutAuthorizationContainer","withoutAuthorizationText","cn","withoutAuthorizationButton","SettingsContainer","this","props","React","Component","compose","connect","state","auth","userId"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,iBAAmB,mCAAmC,8BAAgC,gDAAgD,yBAA2B,2CAA2C,2BAA6B,6CAA6C,OAAS,2B,8JCSpSC,EAAwC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,OAC5D,OACI,qBAAKC,UAAWC,IAAEC,iBAAlB,SACKJ,EACK,cAAC,IAAD,CAASK,QAASJ,EAAQC,UAAWC,IAAEG,OAAQC,GAAI,SAAnD,qBACA,sBAAKL,UAAWC,IAAEK,8BAAlB,UACE,sBAAMN,UAAWC,IAAEM,yBAAnB,wDACA,+BACI,cAAC,IAAD,CAASF,GAAI,SAAUL,UAAWQ,IAAGP,IAAEG,OAAQH,IAAEQ,4BAAjD,2B,QCKlBC,E,uKACF,c,oBAIA,WACI,OAAO,cAAC,EAAD,CAAUZ,QAASa,KAAKC,MAAMd,QACpBC,OAAQY,KAAKC,MAAMb,a,GAPZc,IAAMC,WAavBC,sBACXC,aA1BkB,SAACC,GACnB,MAAO,CACHnB,QAASmB,EAAMC,KAAKC,UAyBN,CAACpB,aAFRgB,CAEmBL","file":"static/js/11.e5017585.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsContainer\":\"Settings_buttonsContainer__1arRT\",\"withoutAuthorizationContainer\":\"Settings_withoutAuthorizationContainer__XwZ9m\",\"withoutAuthorizationText\":\"Settings_withoutAuthorizationText__3EbX_\",\"withoutAuthorizationButton\":\"Settings_withoutAuthorizationButton__1tn-O\",\"button\":\"Settings_button__2ALpc\"};","import React from \"react\";\nimport s from \"./Settings.module.scss\"\nimport { NavLink } from \"react-router-dom\";\nimport cn from \"classnames\";\n\ntype SettingsPropsType = {\n    isOwner: number | null\n    logout: () => void\n}\n\nexport const Settings: React.FC<SettingsPropsType> = ({isOwner, logout}) => {\n    return (\n        <div className={s.buttonsContainer}>\n            {isOwner\n                ? <NavLink onClick={logout} className={s.button} to={\"/login\"}>Log out</NavLink>\n                : <div className={s.withoutAuthorizationContainer}>\n                    <span className={s.withoutAuthorizationText}>Settings are available to authorized users</span>\n                    <span>\n                        <NavLink to={\"/login\"} className={cn(s.button, s.withoutAuthorizationButton)}>Login</NavLink>\n                    </span>\n                </div>\n            }\n        </div>\n    )\n}","import { connect } from \"react-redux\";\nimport { RootStateType } from \"../../redux/reduxStore\";\nimport React from \"react\";\nimport { compose } from \"redux\";\nimport { Settings } from \"./Settings\";\nimport { logout } from \"../../redux/reducers/authReducer\";\n\ntype MapStateToPropsType = {\n    isOwner: number | null\n}\n\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n    return {\n        isOwner: state.auth.userId,\n    };\n};\n\ntype MapDispatchToPropsType = {\n    logout: () => void\n}\n\nexport type SettingsPropsType = MapStateToPropsType & MapDispatchToPropsType;\n\nclass SettingsContainer extends React.Component<SettingsPropsType> {\n    componentDidMount() {\n\n    }\n\n    render() {\n        return <Settings isOwner={this.props.isOwner}\n                         logout={this.props.logout}\n\n        />\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>\n    (mapStateToProps, {logout}),)(SettingsContainer)"],"sourceRoot":""}