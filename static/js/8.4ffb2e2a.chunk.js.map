{"version":3,"sources":["components/common/FormsControls/FormsControls.module.scss","components/common/FormsControls/FormsControls.tsx","utils/validators/validator.tsx","components/Login/Login.module.scss","components/Login/Login.tsx"],"names":["module","exports","FormControl","input","meta","props","hasError","error","touched","className","s","formControlError","children","Textarea","restProps","Input","createField","placeholder","name","validators","component","text","wrapperClass","fieldClass","validate","required","value","maxLengthCreator","maxLength","length","maxLength100","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","formContainer","field","type","src","alt","inputErrorStyle","formSummaryError","button","connect","state","isAuth","auth","login","to","container","textContainer","href","target","formData","email","password","rememberMe","captcha"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,iBAAmB,wCAAwC,iBAAmB,0C,mMCGnFC,EAA6B,SAAC,GAA4B,EAA3BC,MAA4B,IAArBC,EAAoB,EAApBA,KAASC,EAAW,gCAC7DC,EAAWF,EAAKG,OAASH,EAAKI,QACpC,OACI,sBAAKC,UAAWH,EAAWI,IAAEC,iBAAmB,GAAhD,UACI,8BACKN,EAAMO,WAEX,8BACKN,GAAY,+BAAOF,EAAKG,cAM5BM,EAAW,SAACR,GAAgB,IAC9BF,EAAuCE,EAAvCF,MAA0BW,GAAaT,EAAhCD,KAAgCC,EAA1BO,SADgB,YACUP,EADV,8BAEpC,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAwB,oDAAcF,GAAWW,QAG/CC,EAAQ,SAACV,GAAgB,IAC3BF,EAAuCE,EAAvCF,MAA0BW,GAAaT,EAAhCD,KAAgCC,EAA1BO,SADa,YACaP,EADb,8BAEjC,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAwB,iDAAWF,GAAWW,QAG5CE,EAAc,eAACC,EAAD,uDAAuB,GAAIC,EAA3B,uCAAyCC,EAAzC,uCAAiEC,EAAjE,uCACvBf,EADuB,uDACf,GAAIgB,EADW,uDACI,GAAIC,EADR,uCAC2BC,EAD3B,8CAEvB,sBAAKd,UAAWa,EAAhB,UACI,cAAC,IAAD,yBAAOL,YAAaA,EACbC,KAAMA,EACNM,SAAUL,EACVC,UAAWA,GACPf,GAJX,IAKOI,UAAWc,KAEjBF,O,iCCtCT,oEAAO,IAAMI,EAAW,SAACC,GACrB,IAAIA,EAGJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,GAASA,EAAMG,OAASD,EACxB,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCRR5B,EAAOC,QAAU,CAAC,UAAY,yBAAyB,cAAgB,6BAA6B,KAAO,oBAAoB,cAAgB,6BAA6B,MAAQ,qBAAqB,MAAQ,qBAAqB,MAAQ,qBAAqB,OAAS,wB,iCCD5Q,qHAuBM6B,EAAeH,YAAiB,KAmChCI,EAAiBC,YAA4C,CAACC,KAAM,SAAnDD,EAjC+E,SAAC,GAIhG,IAHHE,EAGE,EAHFA,aACA3B,EAEE,EAFFA,MACA4B,EACE,EADFA,WAEA,OACI,uBAAMC,SAAUF,EACVzB,UAAWC,IAAE2B,cADnB,UAGKrB,YAAY,QAAS,QAAS,CAACS,KAAWV,IAAO,GAAI,GAAIL,IAAE4B,MAAO5B,IAAEP,OACpEa,YAAY,WAAY,WAAY,CAACS,IAAUK,GAAef,IAAO,GAAI,GAAIL,IAAE4B,MAAO5B,IAAEP,OACxFa,YAAY,WAAY,aAAc,GAAID,IAAO,CAACwB,KAAM,YAAa,cAAe7B,IAAE4B,MAAO,IAE7FH,GAAc,8BACX,8BACI,qBAAKK,IAAKL,EAAYM,IAAI,gBAGjCN,GAAcnB,YAAY,qBAAsB,UAAW,CAACS,KAAWV,IAAO,GAAI,GAAIL,IAAE4B,MAAO5B,IAAEP,OAEjGI,GAAS,qBAAKE,UAAWiC,IAAgBC,iBAAhC,SACLpC,IAGL,qBAAKE,UAAWC,IAAE4B,MAAlB,SACI,cAAC,IAAD,CAAQC,KAAM,SAAU9B,UAAWC,IAAEkC,OAArC,4BA0CDC,uBALS,SAACC,GAAD,MAA2B,CAC/CC,OAAQD,EAAME,KAAKD,OACnBZ,WAAYW,EAAME,KAAKb,cAGa,CAACc,WAA1BJ,EA1BD,SAACxC,GAKX,OAAIA,EAAM0C,OACC,cAAC,IAAD,CAAUG,GAAI,aAGlB,sBAAKzC,UAAWC,IAAEyC,UAAlB,UACH,sBAAK1C,UAAWC,IAAE0C,cAAlB,UACI,oBAAG3C,UAAWC,IAAEW,KAAhB,sCAA+C,mBAAGgC,KAAK,wCACLC,OAAO,SADV,qBAE/C,mBAAG7C,UAAWC,IAAEW,KAAhB,qDACA,mBAAGZ,UAAWC,IAAEW,KAAhB,uCACA,mBAAGZ,UAAWC,IAAEW,KAAhB,+BAEJ,cAACU,EAAD,CAAgBK,SAhBH,SAACmB,GACdlD,EAAM4C,MAAMM,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAezCxB,WAAY9B,EAAM8B","file":"static/js/8.4ffb2e2a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControlError\":\"FormsControls_formControlError__VBZAh\",\"formSummaryError\":\"FormsControls_formSummaryError__1zq_V\"};","import React from \"react\";\nimport s from \"./FormsControls.module.scss\"\nimport { Field } from \"redux-form\";\n\nexport const FormControl: React.FC<any> = ({input, meta, ...props}) => {\n    const hasError = meta.error && meta.touched;\n    return (\n        <div className={hasError ? s.formControlError : \"\"}>\n            <div>\n                {props.children}\n            </div>\n            <div>\n                {hasError && <span>{meta.error}</span>}\n            </div>\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, children, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\n}\n\nexport const Input = (props: any) => {\n    const {input, meta, children, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n}\n\nexport const createField = (placeholder: string = \"\", name: string, validators: Array<any>, component: any,\n    props = {}, text: string = \"\", wrapperClass: any, fieldClass: any) => (\n    <div className={wrapperClass}>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validators}\n               component={component}\n               {...props}\n               className={fieldClass}\n        />\n        {text}\n    </div>\n)","export const required = (value: string) => {\n    if (value) {\n        return undefined;\n    }\n    return \"Field is required\";\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value && value.length > maxLength) {\n        return `Max length is ${maxLength} symbols`;\n    }\n    return undefined;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__57xX7\",\"textContainer\":\"Login_textContainer__3J4Nw\",\"text\":\"Login_text__1_MRk\",\"formContainer\":\"Login_formContainer__1pWUV\",\"field\":\"Login_field__3T7q6\",\"input\":\"Login_input__2SXTi\",\"error\":\"Login_error__1QJn6\",\"button\":\"Login_button__3yVTZ\"};","import React from \"react\"\nimport s from \"./Login.module.scss\"\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { createField, Input } from \"../common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/validators/validator\";\nimport { login } from \"../../redux/reducers/authReducer\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { RootStateType } from \"../../redux/reduxStore\";\nimport inputErrorStyle from \"../common/FormsControls/FormsControls.module.scss\"\nimport Button from \"../common/Button/Button\";\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\ntype LoginFormPropsType = {\n    captchaUrl: null | string\n}\n\nconst maxLength100 = maxLengthCreator(100);\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormPropsType> & LoginFormPropsType> = ({\n    handleSubmit,\n    error,\n    captchaUrl,\n}) => {\n    return (\n        <form onSubmit={handleSubmit}\n              className={s.formContainer}\n        >\n            {createField(\"Email\", \"email\", [required], Input, {}, \"\", s.field, s.input)}\n            {createField(\"Password\", \"password\", [required, maxLength100], Input, {}, \"\", s.field, s.input)}\n            {createField(\"Password\", \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Remember me\", s.field, \"\")}\n\n            {captchaUrl && <div>\n                <div>\n                    <img src={captchaUrl} alt=\"Captcha\"/>\n                </div>\n            </div>}\n            {captchaUrl && createField(\"Symbols from image\", \"captcha\", [required], Input, {}, \"\", s.field, s.input)}\n\n            {error && <div className={inputErrorStyle.formSummaryError}>\n                {error}\n            </div>\n            }\n            <div className={s.field}>\n                <Button type={\"submit\"} className={s.button}>\n                    Submit\n                </Button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({form: \"login\"})(LoginForm);\n\ntype LoginPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n    isAuth: boolean\n    captchaUrl: null | string\n}\n\nconst Login = (props: LoginPropsType) => {\n    const onSubmit = (formData: FormDataType) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={\"/profile\"}/>\n    }\n\n    return <div className={s.container}>\n        <div className={s.textContainer}>\n            <p className={s.text}>To log in get registered <a href=\"https://social-network.samuraijs.com/\"\n                                                              target=\"_blank\">here</a></p>\n            <p className={s.text}>Or use common test account credentials:</p>\n            <p className={s.text}>Email: free@samuraijs.com</p>\n            <p className={s.text}>Password: free</p>\n        </div>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\n    </div>\n}\n\nconst mapStateToProps = (state: RootStateType) => ({\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaUrl,\n})\n\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}